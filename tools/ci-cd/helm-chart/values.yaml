# For the list of variables that can be modified see: https://github.com/bitnami/charts/tree/master/bitnami/aspnet-core
# For details about ingress see AKS docs: https://docs.microsoft.com/en-gb/azure/aks/http-application-routing

_anchors:
  image: &defaultImage
    registry: '${Docker_DockerRegistry}'
    tag: '${Docker_ImageTag}'
  extraVolumeMounts:
    - &appSettingsVolumeMount
      name: appsettings-json
      mountPath: app/appsettings.json
      subPath: appsettings.json
      readOnly: true

api:
  image:
    <<: *defaultImage
    repository: web-api-starter/api
  podAnnotations:
    # have helm redeploy the pods when the only a configMap value has changed
    checksum-appsettings-json: '${Checksum_Api}'
  podLabels:
    azure.workload.identity/use: "true"
  command: ["dotnet", "Template.Api.dll"]
  extraEnvVars:
    - name: ASPNETCORE_FORWARDEDHEADERS_ENABLED
      value: "true"
  bindURLs: http://+:80
  containerPorts:
    http: 80
  extraVolumes:
    - name: appsettings-json
      configMap:
        name: '${Helm_ReleaseName}-api-appsettings-json'
        items:
          - key: appsettings.json
            path: appsettings.json
  extraVolumeMounts:
    - <<: *appSettingsVolumeMount
  nodeSelector:
    'beta.kubernetes.io/os': linux
  appFromExternalRepo:
    enabled: false
  serviceAccount:
    create: true
    name: "${Helm_ReleaseName}-api"
  resources:
    # IMPORTANT: How to set limits and requests...
    # Set resource requests to the amount utilized by a "normal" workload with 2 pods running
    # Set resource limits to be 2.5 X requested value. This will allow for spikes in traffic.
    limits:
      cpu: 190m
      memory: 375Mi
    requests:
      cpu: 75m
      memory: 150Mi
  customStartupProbe:
    httpGet:
      path: /health
      port: 80
    initialDelaySeconds: 10
  readinessProbe:
    enabled: false # we're using startupProbe instead as don't want/need readinessProbe semantics
  customLivenessProbe:
    httpGet:
      path: /health
      port: 80
    initialDelaySeconds: 3
  autoscaling:
    enabled: true
    # the targets below are a % of resource REQUESTS (not limits). The values here is based on the following thoughts:
    # Say you set request to 100m and limit to 250m. Set HPA to 200% cpu utilisation - this way the pods will scale when CPU usage hits 200m. 
    # This resulted in more efficient use of the nodes across the cluster as opposed to setting both request and limit to 250m and scaling at 75% CPU utilisation.
    # With requests at 100m, I can spin up more pods faster when HPA kicks in (because with the same infrastructure I have more free capacity) 
    # and at the same time it allows some time for a new VM to come up and join the cluster for more capacity before the hard limits are hit.
    targetCPU: 200 # k8 will throttle cpu a pod receives so don't need to scale as quickly as memory
    targetMemory: 180 # scale up sooner for memory as k8 will kill a pod that exceeds it's memory limit
    minReplicas: 1
    maxReplicas: 2
  ingress:
    enabled: true
#    ingressClassName: nginx
    annotations:
      # todo: replace with `ingressClassName: nginx` above once all our aks clusters are updated to support `ingressClassName` field
      kubernetes.io/ingress.class: nginx
    hostname: dev-api-web-api-starter.redmz.mrisoftware.com
    extraTls:
      - hosts:
          - dev-api-web-api-starter.redmz.mrisoftware.com
        secretName: redmz.mrisoftware.com-wildcard-tls
  healthIngress:
    enabled: true
#    ingressClassName: nginx
    annotations:
      # todo: replace with `ingressClassName: nginx` above once all our aks clusters are updated to support `ingressClassName` field
      kubernetes.io/ingress.class: nginx
      # note: we have TWO DIFFERENT ingress controllers in play depending on the aks cluster being deployed to. Both of
      # these use different annotation prefixes as follows:
      # 1. nginx.org (https://github.com/nginxinc/kubernetes-ingress/) (dev and demo cluster)
      # 2. nginx.ingress.kubernetes.io (https://github.com/kubernetes/ingress-nginx) (all other cluster)
      nginx.ingress.kubernetes.io/rewrite-target: /health
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
      nginx.org/rewrites: "serviceName=${Helm_ReleaseName}-api rewrite=/health"
      nginx.org/mergeable-ingress-type: minion
      ingress.kubernetes.io/ssl-redirect: "false" # read by nginx.org ingress-controller
    hostname: dev-aks-eastus.redmz.mrisoftware.com
    path: /trafficmanager-health-app-web-api-starter-api
